/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/evaluation/evaluate/{auditScopeId}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Evaluates periodically all assessment results of a certification target id based
         *      on the given catalog id. Part of the public API, also exposed as REST. */
        post: operations["Evaluation_StartEvaluation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/evaluation/evaluate/{auditScopeId}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description StopEvaluation stops the evaluation for the given audit scope.
         *      Part of the public API, also exposed as REST. */
        post: operations["Evaluation_StopEvaluation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/evaluation/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all evaluation results that the user can access. It can further be
         *      restricted by various filtering options. Part of the public API, also
         *      exposed as REST. */
        get: operations["Evaluation_ListEvaluationResults"];
        put?: never;
        /** @description Creates an evaluation result */
        post: operations["Evaluation_CreateEvaluationResult"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description A evaluation result resource, representing the result after evaluating the
         *      certification target with a specific control certification_target_id, category_name and
         *      catalog_id are necessary to get the corresponding AuditScope */
        EvaluationResult: {
            /** @description Evaluation result id */
            id?: string;
            /** @description The Certification Target ID the evaluation belongs to */
            certificationTargetId?: string;
            /** @description The Audit Scope ID the evaluation belongs to */
            auditScopeId?: string;
            /** @description The control id the evaluation was based on */
            controlId?: string;
            /** @description The category the evaluated control belongs to */
            controlCategoryName?: string;
            /** @description The catalog the evaluated control belongs to */
            controlCatalogId?: string;
            /** @description Optionally, specifies the parent control ID, if this is a sub-control */
            parentControlId?: string;
            /**
             * Format: enum
             * @description Evaluation status
             * @enum {string}
             */
            status?: "EVALUATION_STATUS_UNSPECIFIED" | "EVALUATION_STATUS_COMPLIANT" | "EVALUATION_STATUS_COMPLIANT_MANUALLY" | "EVALUATION_STATUS_NOT_COMPLIANT" | "EVALUATION_STATUS_NOT_COMPLIANT_MANUALLY" | "EVALUATION_STATUS_PENDING";
            /**
             * Format: date-time
             * @description Time of evaluation
             */
            timestamp?: string;
            /** @description List of assessment results because of which the evaluation status is not
             *      'compliant' */
            failingAssessmentResultIds?: string[];
            comment?: string;
            /**
             * Format: date-time
             * @description Optional, but required if the status is one of the "manually" ones. This
             *      denotes how long the (manual) created evaluation result is valid. During
             *      this time, no automatic results are generated for the specific control.
             */
            validUntil?: string;
        };
        /** @description Contains an arbitrary serialized message along with a @type that describes the type of the serialized message. */
        GoogleProtobufAny: {
            /** @description The type of the serialized message. */
            "@type"?: string;
        } & {
            [key: string]: unknown;
        };
        ListEvaluationResultsResponse: {
            results?: components["schemas"]["EvaluationResult"][];
            nextPageToken?: string;
        };
        StartEvaluationResponse: {
            successful?: boolean;
        };
        /** @description The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
        Status: {
            /**
             * Format: int32
             * @description The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
             */
            code?: number;
            /** @description A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client. */
            message?: string;
            /** @description A list of messages that carry the error details.  There is a common set of message types for APIs to use. */
            details?: components["schemas"]["GoogleProtobufAny"][];
        };
        StopEvaluationResponse: Record<string, never>;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaEvaluationResult = components['schemas']['EvaluationResult'];
export type SchemaGoogleProtobufAny = components['schemas']['GoogleProtobufAny'];
export type SchemaListEvaluationResultsResponse = components['schemas']['ListEvaluationResultsResponse'];
export type SchemaStartEvaluationResponse = components['schemas']['StartEvaluationResponse'];
export type SchemaStatus = components['schemas']['Status'];
export type SchemaStopEvaluationResponse = components['schemas']['StopEvaluationResponse'];
export type $defs = Record<string, never>;
export interface operations {
    Evaluation_StartEvaluation: {
        parameters: {
            query?: {
                /** @description The interval time in minutes the evaluation executes periodically. The
                 *      default interval is set to 5 minutes. */
                interval?: number;
            };
            header?: never;
            path: {
                auditScopeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StartEvaluationResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Evaluation_StopEvaluation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                auditScopeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StopEvaluationResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Evaluation_ListEvaluationResults: {
        parameters: {
            query?: {
                /** @description Optional. Lists only evaluation results for a specific certification target. */
                "filter.certificationTargetId"?: string;
                /** @description Optional. Lists only evaluation results for a specific catalog. */
                "filter.catalogId"?: string;
                /** @description Optional. Lists only evaluation results for a specific control id. */
                "filter.controlId"?: string;
                /** @description Optional. Lists all evaluation results for the given initial control id
                 *      substring, e.g., if the substring 'CMK-01.' is given it returns the
                 *      controls CMK-01.1B, CMK-01.1S, CMK-01.1H. */
                "filter.subControls"?: string;
                /** @description Optional. Lists only results for parent controls */
                "filter.parentsOnly"?: boolean;
                /** @description Optional. Lists only manual results in their validity period */
                "filter.validManualOnly"?: boolean;
                /** @description Optional. Latest results grouped by control_id. */
                latestByControlId?: boolean;
                pageSize?: number;
                pageToken?: string;
                orderBy?: string;
                asc?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListEvaluationResultsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Evaluation_CreateEvaluationResult: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EvaluationResult"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvaluationResult"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
}
