/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/evidence_store/evidence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Stores an evidence to the evidence storage. Part of the public API, also
         *      exposed as REST. */
        post: operations["EvidenceStore_StoreEvidence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/evidence_store/evidences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns all stored evidences. Part of the public API, also exposed as REST. */
        get: operations["EvidenceStore_ListEvidences"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/evidence_store/evidences/{evidenceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a particular stored evidence. Part of the public API, also exposed
         *      as REST. */
        get: operations["EvidenceStore_GetEvidence"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/evidence_store/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists all resources collected in the last run, exposed as REST. */
        get: operations["EvidenceStore_ListResources"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/evidence_store/supported_resource_types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the resource types that are supported by the EvidenceStore. */
        get: operations["EvidenceStore_ListSupportedResourceTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1experimental/evidence/graph/edges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ListGraphEdges returns the edges (relationship) between resources in our
         *      resource graph.
         *
         *      Note: THIS API IS EXPERIMENTAL AND SUBJECT TO CHANGE */
        get: operations["ExperimentalResources_ListGraphEdges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1experimental/evidence_store/resources/{resource.id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description UpdateResource updates a resource (or creates it, if it does not exist).
         *      This is used to give third-party tools the possibility to add something to
         *      the resource graph.
         *
         *      Note: THIS API IS EXPERIMENTAL AND SUBJECT TO CHANGE */
        post: operations["ExperimentalResources_UpdateResource"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description ABAC is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ABAC: Record<string, never>;
        /** @description AccessRestriction is an abstract class in our ontology, it cannot be instantiated but acts as an "interface". */
        AccessRestriction: {
            l3Firewall?: components["schemas"]["L3Firewall"];
            webApplicationFirewall?: components["schemas"]["WebApplicationFirewall"];
        };
        /** @description Account is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      This represents the cloud account as a whole, e.g., an Azure subscription. */
        Account: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description ActivityLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ActivityLogging: {
            enabled?: boolean;
            monitoringLogDataEnabled?: boolean;
            retentionPeriod?: string;
            securityAlertsEnabled?: boolean;
            loggingServiceIds?: string[];
        };
        /** @description AnomalyDetection is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      Analyzes the activity of a NetworkService (which includes DatabaseServices).
         *      Scope contains the resource ID of the protected resource. */
        AnomalyDetection: {
            enabled?: boolean;
            scope?: string;
            applicationLogging?: components["schemas"]["ApplicationLogging"];
        };
        /** @description Application is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      This encapsulates the whole (source) code of an application. */
        Application: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            programmingLanguage?: string;
            programmingVersion?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            translationUnits?: string[];
            automaticUpdates?: components["schemas"]["AutomaticUpdates"];
            codeModuleIds?: string[];
            codeRepositoryId?: string;
            computeId?: string;
            functionalities?: components["schemas"]["Functionality"][];
            libraryIds?: string[];
            parentId?: string;
        };
        /** @description ApplicationLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ApplicationLogging: {
            enabled?: boolean;
            monitoringLogDataEnabled?: boolean;
            retentionPeriod?: string;
            securityAlertsEnabled?: boolean;
            loggingServiceIds?: string[];
        };
        /** @description AtRestEncryption is an abstract class in our ontology, it cannot be instantiated but acts as an "interface". */
        AtRestEncryption: {
            customerKeyEncryption?: components["schemas"]["CustomerKeyEncryption"];
            managedKeyEncryption?: components["schemas"]["ManagedKeyEncryption"];
        };
        /** @description Authenticity is an abstract class in our ontology, it cannot be instantiated but acts as an "interface". */
        Authenticity: {
            certificateBasedAuthentication?: components["schemas"]["CertificateBasedAuthentication"];
            tokenBasedAuthentication?: components["schemas"]["TokenBasedAuthentication"];
            multiFactorAuthentiation?: components["schemas"]["MultiFactorAuthentiation"];
            noAuthentication?: components["schemas"]["NoAuthentication"];
            otpBasedAuthentication?: components["schemas"]["OTPBasedAuthentication"];
            passwordBasedAuthentication?: components["schemas"]["PasswordBasedAuthentication"];
            singleSignOn?: components["schemas"]["SingleSignOn"];
        };
        /** @description Authorization is an abstract class in our ontology, it cannot be instantiated but acts as an "interface". */
        Authorization: {
            abac?: components["schemas"]["ABAC"];
            l3Firewall?: components["schemas"]["L3Firewall"];
            webApplicationFirewall?: components["schemas"]["WebApplicationFirewall"];
            rbac?: components["schemas"]["RBAC"];
        };
        /** @description AutomaticUpdates is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      This feature is, e.g., available on some VM services to automatically update their software. It ensures that a resource is protected from tampering with its state. */
        AutomaticUpdates: {
            enabled?: boolean;
            /** @description The interval refers to the update interval in days. */
            interval?: string;
            securityOnly?: boolean;
        };
        /** @description AwarenessTraining is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        AwarenessTraining: {
            annualUpdateCompleted?: boolean;
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            successfullyCompletedPercentage?: boolean;
            parentId?: string;
        };
        /** @description Backup is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      RetentionPeriod in hours */
        Backup: {
            enabled?: boolean;
            /** @description The interval refers to the update interval in days. */
            interval?: string;
            retentionPeriod?: string;
            storageId?: string;
            transportEncryption?: components["schemas"]["TransportEncryption"];
        };
        /** @description BlockStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        BlockStorage: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            activityLogging?: components["schemas"]["ActivityLogging"];
            atRestEncryption?: components["schemas"]["AtRestEncryption"];
            backups?: components["schemas"]["Backup"][];
            geoLocation?: components["schemas"]["GeoLocation"];
            immutability?: components["schemas"]["Immutability"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            resourceLogging?: components["schemas"]["ResourceLogging"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description BootLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        BootLogging: {
            enabled?: boolean;
            monitoringLogDataEnabled?: boolean;
            retentionPeriod?: string;
            securityAlertsEnabled?: boolean;
            loggingServiceIds?: string[];
        };
        /** @description Certificate is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        Certificate: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            enabled?: boolean;
            /** Format: date-time */
            expirationDate?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            isManaged?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** Format: date-time */
            notBeforeDate?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            infrastructureId?: string;
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description CertificateBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        CertificateBasedAuthentication: {
            contextIsChecked?: boolean;
            enabled?: boolean;
        };
        /** @description CipherSuite is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        CipherSuite: {
            /** @description for example: RSA, ECDSA */
            authenticationMechanism?: string;
            keyExchangeAlgorithm?: string;
            /** @description naming schema: SHA-256 */
            macAlgorithm?: string;
            /** @description naming schema: AES-128-GCM */
            sessionCipher?: string;
        };
        /** @description CodeNotebook is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        CodeNotebook: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            filetype?: string;
            id?: string;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            codeIds?: string[];
            dataLocation?: components["schemas"]["DataLocation"];
            documentChecksums?: components["schemas"]["DocumentChecksum"][];
            documentSignatures?: components["schemas"]["DocumentSignature"][];
            parentId?: string;
            schemaValidation?: components["schemas"]["SchemaValidation"];
            securityFeatures?: components["schemas"]["SecurityFeature"][];
        };
        /** @description CodeRegion is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        CodeRegion: {
            code?: string;
            /** Format: int32 */
            endColumn?: number;
            /** Format: int32 */
            endLine?: number;
            file?: string;
            /** Format: int32 */
            startColumn?: number;
            /** Format: int32 */
            startLine?: number;
        };
        /** @description CodeRepository is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        CodeRepository: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description Container is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        Container: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            encryptionInUse?: components["schemas"]["EncryptionInUse"];
            geoLocation?: components["schemas"]["GeoLocation"];
            imageId?: string;
            loggings?: components["schemas"]["Logging"][];
            networkInterfaceIds?: string[];
            redundancies?: components["schemas"]["Redundancy"][];
            remoteAttestation?: components["schemas"]["RemoteAttestation"];
            parentId?: string;
            resourceLogging?: components["schemas"]["ResourceLogging"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description ContainerImage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ContainerImage: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            applicationId?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description ContainerOrchestration is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ContainerOrchestration: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            managementUrl?: string;
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            containerIds?: string[];
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            resourceLogging?: components["schemas"]["ResourceLogging"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description ContainerRegistry is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ContainerRegistry: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description CryptographicHash is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        CryptographicHash: {
            algorithm?: string;
            usesSalt?: boolean;
            codeRegion?: components["schemas"]["CodeRegion"];
        };
        /** @description CustomerKeyEncryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        CustomerKeyEncryption: {
            algorithm?: string;
            enabled?: boolean;
            keyUrl?: string;
        };
        /** @description DDoSProtection is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        DDoSProtection: Record<string, never>;
        /** @description DataLocation is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
         *      path: Describes either local path or path in URL format */
        DataLocation: {
            localDataLocation?: components["schemas"]["LocalDataLocation"];
            remoteDataLocation?: components["schemas"]["RemoteDataLocation"];
        };
        /** @description DatabaseConnect is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        DatabaseConnect: {
            calls?: string[];
            codeRegion?: components["schemas"]["CodeRegion"];
            databaseServiceIds?: string[];
            databaseStorageId?: string;
        };
        /** @description DatabaseQuery is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        DatabaseQuery: {
            calls?: string[];
            modify?: boolean;
            codeRegion?: components["schemas"]["CodeRegion"];
            databaseServiceIds?: string[];
            databaseStorageId?: string;
        };
        /** @description DatabaseStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      describes the actual database or a table in a database */
        DatabaseStorage: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            activityLogging?: components["schemas"]["ActivityLogging"];
            atRestEncryption?: components["schemas"]["AtRestEncryption"];
            backups?: components["schemas"]["Backup"][];
            geoLocation?: components["schemas"]["GeoLocation"];
            immutability?: components["schemas"]["Immutability"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            resourceLogging?: components["schemas"]["ResourceLogging"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description Decryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        Decryption: {
            algorithm?: string;
            codeRegion?: components["schemas"]["CodeRegion"];
        };
        /** @description DeviceProvisioningService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        DeviceProvisioningService: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description DocumentChecksum is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        DocumentChecksum: {
            algorithm?: string;
            errors?: components["schemas"]["Error"][];
        };
        /** @description DocumentDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        DocumentDatabaseService: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            ips?: string[];
            labels?: {
                [key: string]: string;
            };
            name?: string;
            ports?: number[];
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            activityLogging?: components["schemas"]["ActivityLogging"];
            anomalyDetections?: components["schemas"]["AnomalyDetection"][];
            authenticity?: components["schemas"]["Authenticity"];
            computeIds?: string[];
            geoLocation?: components["schemas"]["GeoLocation"];
            httpEndpoint?: components["schemas"]["HttpEndpoint"];
            loggings?: components["schemas"]["Logging"][];
            malwareProtection?: components["schemas"]["MalwareProtection"];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            serviceMetadataDocumentId?: string;
            storageIds?: string[];
            transportEncryption?: components["schemas"]["TransportEncryption"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description DocumentSignature is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        DocumentSignature: {
            algorithm?: string;
            errors?: components["schemas"]["Error"][];
        };
        /** @description Encryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        Encryption: {
            algorithm?: string;
            codeRegion?: components["schemas"]["CodeRegion"];
        };
        /** @description EncryptionInUse is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        EncryptionInUse: {
            enabled?: boolean;
        };
        /** @description Error is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        Error: {
            message?: string;
        };
        /** @description An evidence resource */
        Evidence: {
            /** @description the ID in a uuid format */
            id?: string;
            /**
             * Format: date-time
             * @description time of evidence creation
             */
            timestamp?: string;
            /** @description Reference to a target of evaluation (e.g., service, organization) this evidence was gathered from */
            targetOfEvaluationId?: string;
            /** @description Reference to the tool which provided the evidence */
            toolId?: string;
            /** @description Semantic representation of the Cloud resource according to our defined
             *      ontology */
            resource?: components["schemas"]["Resource"];
            /** @description Very experimental property. Use at own risk. This property will be deleted again.
             *
             *      Related resource IDs. The assessment will wait until all evidences for related resource have arrived in the
             *      assessment and are recent enough. In the future, this will be replaced with information in the "related" edges in
             *      the resource. For now, this needs to be set manually in the evidence. */
            experimentalRelatedResourceIds?: string[];
        };
        /** @description ExplainableResults is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ExplainableResults: Record<string, never>;
        /** @description FileStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        FileStorage: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            publicAccess?: boolean;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            activityLogging?: components["schemas"]["ActivityLogging"];
            atRestEncryption?: components["schemas"]["AtRestEncryption"];
            backups?: components["schemas"]["Backup"][];
            geoLocation?: components["schemas"]["GeoLocation"];
            immutability?: components["schemas"]["Immutability"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            resourceLogging?: components["schemas"]["ResourceLogging"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description FileStorageService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      An file storage service represents the network service that is used to access a list of file storage shares. The storage itself is modelled as a FileStorage. The service has an http endpoint. */
        FileStorageService: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            ips?: string[];
            labels?: {
                [key: string]: string;
            };
            name?: string;
            ports?: number[];
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            activityLogging?: components["schemas"]["ActivityLogging"];
            authenticity?: components["schemas"]["Authenticity"];
            computeIds?: string[];
            geoLocation?: components["schemas"]["GeoLocation"];
            httpEndpoint?: components["schemas"]["HttpEndpoint"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            serviceMetadataDocumentId?: string;
            storageIds?: string[];
            transportEncryption?: components["schemas"]["TransportEncryption"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description Function is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        Function: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            runtimeLanguage?: string;
            runtimeVersion?: string;
            encryptionInUse?: components["schemas"]["EncryptionInUse"];
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            networkInterfaceIds?: string[];
            redundancies?: components["schemas"]["Redundancy"][];
            remoteAttestation?: components["schemas"]["RemoteAttestation"];
            parentId?: string;
            resourceLogging?: components["schemas"]["ResourceLogging"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description FunctionService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        FunctionService: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            ips?: string[];
            labels?: {
                [key: string]: string;
            };
            name?: string;
            ports?: number[];
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            authenticity?: components["schemas"]["Authenticity"];
            computeIds?: string[];
            functionIds?: string[];
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            serviceMetadataDocumentId?: string;
            transportEncryption?: components["schemas"]["TransportEncryption"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description Functionality is an abstract class in our ontology, it cannot be instantiated but acts as an "interface". */
        Functionality: {
            cipherSuite?: components["schemas"]["CipherSuite"];
            codeRegion?: components["schemas"]["CodeRegion"];
            localDataLocation?: components["schemas"]["LocalDataLocation"];
            remoteDataLocation?: components["schemas"]["RemoteDataLocation"];
            error?: components["schemas"]["Error"];
            httpEndpoint?: components["schemas"]["HttpEndpoint"];
            httpRequestHandler?: components["schemas"]["HttpRequestHandler"];
            decryption?: components["schemas"]["Decryption"];
            encryption?: components["schemas"]["Encryption"];
            cryptographicHash?: components["schemas"]["CryptographicHash"];
            databaseConnect?: components["schemas"]["DatabaseConnect"];
            databaseQuery?: components["schemas"]["DatabaseQuery"];
            httpRequest?: components["schemas"]["HttpRequest"];
            logOperation?: components["schemas"]["LogOperation"];
            objectStorageRequest?: components["schemas"]["ObjectStorageRequest"];
            schemaValidation?: components["schemas"]["SchemaValidation"];
            securityAdvisoryFeed?: components["schemas"]["SecurityAdvisoryFeed"];
            vulnerability?: components["schemas"]["Vulnerability"];
        };
        /** @description GenericDocument is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      This is a placeholder for all other documents, e.g. index.txt */
        GenericDocument: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            filetype?: string;
            id?: string;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            dataLocation?: components["schemas"]["DataLocation"];
            documentChecksums?: components["schemas"]["DocumentChecksum"][];
            documentSignatures?: components["schemas"]["DocumentSignature"][];
            parentId?: string;
            schemaValidation?: components["schemas"]["SchemaValidation"];
            securityFeatures?: components["schemas"]["SecurityFeature"][];
        };
        /** @description GenericNetworkService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      A generic network service. */
        GenericNetworkService: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            ips?: string[];
            labels?: {
                [key: string]: string;
            };
            name?: string;
            ports?: number[];
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            authenticity?: components["schemas"]["Authenticity"];
            computeIds?: string[];
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            serviceMetadataDocumentId?: string;
            transportEncryption?: components["schemas"]["TransportEncryption"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description GeoLocation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        GeoLocation: {
            region?: string;
        };
        /** @description GeoRedundancy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        GeoRedundancy: {
            geoLocations?: components["schemas"]["GeoLocation"][];
        };
        /** @description Contains an arbitrary serialized message along with a @type that describes the type of the serialized message. */
        GoogleProtobufAny: {
            /** @description The type of the serialized message. */
            "@type"?: string;
        } & {
            [key: string]: unknown;
        };
        GraphEdge: {
            id: string;
            source: string;
            target: string;
            type: string;
        };
        /** @description HttpEndpoint is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      An HTTP endpoint can set the "proxyTarget" property, in case that is routed through a (reverse) proxy, e.g. a load balancer.
         *      Via the Authenticity relationship, the access type can be specified, e.g. public access (no authentication), password-based, etc. */
        HttpEndpoint: {
            handler?: string;
            method?: string;
            path?: string;
            url?: string;
            authenticity?: components["schemas"]["Authenticity"];
            transportEncryption?: components["schemas"]["TransportEncryption"];
        };
        /** @description HttpRequest is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        HttpRequest: {
            call?: string;
            reqBody?: string;
            codeRegion?: components["schemas"]["CodeRegion"];
            httpEndpoints?: components["schemas"]["HttpEndpoint"][];
        };
        /** @description HttpRequestHandler is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        HttpRequestHandler: {
            path?: string;
            applicationId?: string;
            httpEndpoints?: components["schemas"]["HttpEndpoint"][];
        };
        /** @description Identity is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        Identity: {
            activated?: boolean;
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            disablePasswordPolicy?: boolean;
            enforceMfa?: boolean;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            /** Format: date-time */
            lastActivity?: string;
            loginDefenderEnabled?: boolean;
            name?: string;
            privileged?: boolean;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            authenticity?: components["schemas"]["Authenticity"];
            authorization?: components["schemas"]["Authorization"];
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description Immutability is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        Immutability: {
            enabled?: boolean;
        };
        /** @description Job is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        Job: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description Key is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        Key: {
            algorithm?: string;
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            enabled?: boolean;
            /** Format: date-time */
            expirationDate?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            isManaged?: boolean;
            /** Format: int32 */
            keySize?: number;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** Format: date-time */
            notBeforeDate?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            infrastructureId?: string;
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description KeyValueDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        KeyValueDatabaseService: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            ips?: string[];
            labels?: {
                [key: string]: string;
            };
            name?: string;
            ports?: number[];
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            activityLogging?: components["schemas"]["ActivityLogging"];
            anomalyDetections?: components["schemas"]["AnomalyDetection"][];
            authenticity?: components["schemas"]["Authenticity"];
            computeIds?: string[];
            geoLocation?: components["schemas"]["GeoLocation"];
            httpEndpoint?: components["schemas"]["HttpEndpoint"];
            loggings?: components["schemas"]["Logging"][];
            malwareProtection?: components["schemas"]["MalwareProtection"];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            serviceMetadataDocumentId?: string;
            storageIds?: string[];
            transportEncryption?: components["schemas"]["TransportEncryption"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description KeyVault is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        KeyVault: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            credentialIds?: string[];
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description L3Firewall is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        L3Firewall: {
            enabled?: boolean;
            inbound?: boolean;
            restrictedPorts?: string;
        };
        /** @description Library is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        Library: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            codeModuleIds?: string[];
            codeRepositoryId?: string;
            functionalities?: components["schemas"]["Functionality"][];
            libraryIds?: string[];
            parentId?: string;
            vulnerabilities?: components["schemas"]["Vulnerability"][];
        };
        ListEvidencesResponse: {
            evidences?: components["schemas"]["Evidence"][];
            nextPageToken?: string;
        };
        ListGraphEdgesResponse: {
            edges: components["schemas"]["GraphEdge"][];
            nextPageToken?: string;
        };
        ListResourcesResponse: {
            results: components["schemas"]["Resource"][];
            nextPageToken?: string;
        };
        ListSupportedResourceTypesResponse: {
            resourceType?: string[];
        };
        /** @description LoadBalancer is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      A Load Balancer may have multiple access restriction features, e.g. a L3 firewall and a WAF */
        LoadBalancer: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            ips?: string[];
            labels?: {
                [key: string]: string;
            };
            name?: string;
            ports?: number[];
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            url?: string;
            accessRestriction?: components["schemas"]["AccessRestriction"];
            authenticity?: components["schemas"]["Authenticity"];
            computeIds?: string[];
            geoLocation?: components["schemas"]["GeoLocation"];
            httpEndpoints?: components["schemas"]["HttpEndpoint"][];
            loggings?: components["schemas"]["Logging"][];
            networkServiceIds?: string[];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            serviceMetadataDocumentId?: string;
            transportEncryption?: components["schemas"]["TransportEncryption"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description LocalAttestation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        LocalAttestation: {
            enabled?: boolean;
        };
        /** @description LocalDataLocation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        LocalDataLocation: {
            path?: string;
            atRestEncryption?: components["schemas"]["AtRestEncryption"];
            storageId?: string;
        };
        /** @description LocalRedundancy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        LocalRedundancy: {
            geoLocations?: components["schemas"]["GeoLocation"][];
        };
        /** @description LogOperation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      A LogOperation is used by an application */
        LogOperation: {
            call?: string;
            value?: string;
            codeRegion?: components["schemas"]["CodeRegion"];
            logging?: components["schemas"]["Logging"];
        };
        /** @description Logging is an abstract class in our ontology, it cannot be instantiated but acts as an "interface". */
        Logging: {
            activityLogging?: components["schemas"]["ActivityLogging"];
            applicationLogging?: components["schemas"]["ApplicationLogging"];
            bootLogging?: components["schemas"]["BootLogging"];
            osLogging?: components["schemas"]["OSLogging"];
            resourceLogging?: components["schemas"]["ResourceLogging"];
        };
        /** @description LoggingService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      A logging-as-a-service offering, e.g. for analyzing logs; has a Storage resource that stores the logs */
        LoggingService: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            ips?: string[];
            labels?: {
                [key: string]: string;
            };
            name?: string;
            ports?: number[];
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            authenticity?: components["schemas"]["Authenticity"];
            computeIds?: string[];
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            serviceMetadataDocumentId?: string;
            storageIds?: string[];
            transportEncryption?: components["schemas"]["TransportEncryption"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description MachineLearningDataset is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        MachineLearningDataset: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            /** Format: int32 */
            size?: number;
            type?: string;
            dataLocation?: components["schemas"]["DataLocation"];
            parentId?: string;
        };
        /** @description MachineLearningModel is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        MachineLearningModel: {
            /** Format: float */
            advRobustness?: number;
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            /** Format: float */
            explainability?: number;
            id?: string;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** Format: float */
            poisonLevel?: number;
            /** Format: float */
            privacyLabel?: number;
            /** Format: float */
            privacyLevel?: number;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            /** Format: float */
            robustness?: number;
            dataLocation?: components["schemas"]["DataLocation"];
            parentId?: string;
            vulnerabilities?: components["schemas"]["Vulnerability"][];
        };
        /** @description MachineLearningService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        MachineLearningService: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            ips?: string[];
            labels?: {
                [key: string]: string;
            };
            name?: string;
            ports?: number[];
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            authenticity?: components["schemas"]["Authenticity"];
            computeIds?: string[];
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            machineLearningIds?: string[];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            serviceMetadataDocumentId?: string;
            storageIds?: string[];
            transportEncryption?: components["schemas"]["TransportEncryption"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description MalwareProtection is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      analyzes the activity within a Compute resource */
        MalwareProtection: {
            durationSinceActive?: string;
            enabled?: boolean;
            /** Format: int32 */
            numberOfThreatsFound?: number;
            applicationLogging?: components["schemas"]["ApplicationLogging"];
        };
        /** @description ManagedKeyEncryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ManagedKeyEncryption: {
            algorithm?: string;
            enabled?: boolean;
            keyUrl?: string;
        };
        /** @description MessagingHub is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        MessagingHub: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description MultiFactorAuthentiation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        MultiFactorAuthentiation: {
            contextIsChecked?: boolean;
            authenticities?: components["schemas"]["Authenticity"][];
        };
        /** @description MultiModalDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      This class represents a database service that identifies itself as "multi-model", e.g., offers document storage as well as relational features. */
        MultiModalDatabaseService: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            ips?: string[];
            labels?: {
                [key: string]: string;
            };
            name?: string;
            ports?: number[];
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            activityLogging?: components["schemas"]["ActivityLogging"];
            anomalyDetections?: components["schemas"]["AnomalyDetection"][];
            authenticity?: components["schemas"]["Authenticity"];
            computeIds?: string[];
            geoLocation?: components["schemas"]["GeoLocation"];
            httpEndpoint?: components["schemas"]["HttpEndpoint"];
            loggings?: components["schemas"]["Logging"][];
            malwareProtection?: components["schemas"]["MalwareProtection"];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            serviceMetadataDocumentId?: string;
            storageIds?: string[];
            transportEncryption?: components["schemas"]["TransportEncryption"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description NetworkInterface is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        NetworkInterface: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            accessRestriction?: components["schemas"]["AccessRestriction"];
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            networkServiceId?: string;
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description NetworkSecurityGroup is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        NetworkSecurityGroup: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description NoAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        NoAuthentication: {
            contextIsChecked?: boolean;
        };
        /** @description OSLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        OSLogging: {
            enabled?: boolean;
            monitoringLogDataEnabled?: boolean;
            retentionPeriod?: string;
            securityAlertsEnabled?: boolean;
            loggingServiceIds?: string[];
        };
        /** @description OTPBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        OTPBasedAuthentication: {
            activated?: boolean;
            contextIsChecked?: boolean;
        };
        /** @description ObjectStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ObjectStorage: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            publicAccess?: boolean;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            activityLogging?: components["schemas"]["ActivityLogging"];
            atRestEncryption?: components["schemas"]["AtRestEncryption"];
            backups?: components["schemas"]["Backup"][];
            geoLocation?: components["schemas"]["GeoLocation"];
            immutability?: components["schemas"]["Immutability"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            resourceLogging?: components["schemas"]["ResourceLogging"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description ObjectStorageRequest is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ObjectStorageRequest: {
            source?: string;
            codeRegion?: components["schemas"]["CodeRegion"];
            objectStorageIds?: string[];
        };
        /** @description ObjectStorageService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      An object storage service represents the network service that is used to access a list of object storage containers. The storage itself is modelled as a ObjectStorage. The service has an http endpoint. */
        ObjectStorageService: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            ips?: string[];
            labels?: {
                [key: string]: string;
            };
            name?: string;
            ports?: number[];
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            activityLogging?: components["schemas"]["ActivityLogging"];
            authenticity?: components["schemas"]["Authenticity"];
            computeIds?: string[];
            geoLocation?: components["schemas"]["GeoLocation"];
            httpEndpoint?: components["schemas"]["HttpEndpoint"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            serviceMetadataDocumentId?: string;
            storageIds?: string[];
            transportEncryption?: components["schemas"]["TransportEncryption"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description PasswordBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        PasswordBasedAuthentication: {
            activated?: boolean;
            contextIsChecked?: boolean;
        };
        /** @description PasswordPolicy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        PasswordPolicy: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description PolicyDocument is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        PolicyDocument: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            filetype?: string;
            id?: string;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            dataLocation?: components["schemas"]["DataLocation"];
            documentChecksums?: components["schemas"]["DocumentChecksum"][];
            documentSignatures?: components["schemas"]["DocumentSignature"][];
            parentId?: string;
            schemaValidation?: components["schemas"]["SchemaValidation"];
            securityFeatures?: components["schemas"]["SecurityFeature"][];
        };
        /** @description QPU is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        QPU: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            errorCorrectionEnabled?: boolean;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** Format: float */
            oneQubitGateErrorRate?: number;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            /** Format: float */
            spamErrorRate?: number;
            /** Format: float */
            twoQubitGateErrorRate?: number;
            encryptionInUse?: components["schemas"]["EncryptionInUse"];
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            networkInterfaceIds?: string[];
            redundancies?: components["schemas"]["Redundancy"][];
            remoteAttestation?: components["schemas"]["RemoteAttestation"];
            parentId?: string;
            resourceLogging?: components["schemas"]["ResourceLogging"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description RBAC is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        RBAC: {
            /**
             * Format: float
             * @description see Privacy Smells: Detecting Privacy Problems in Cloud Architectures (2020)
             */
            broadAssignments?: number;
            /**
             * Format: float
             * @description see Privacy Smells: Detecting Privacy Problems in Cloud Architectures (2020)
             */
            mixedDuties?: number;
        };
        /** @description Redundancy is an abstract class in our ontology, it cannot be instantiated but acts as an "interface". */
        Redundancy: {
            geoRedundancy?: components["schemas"]["GeoRedundancy"];
            localRedundancy?: components["schemas"]["LocalRedundancy"];
            zoneRedundancy?: components["schemas"]["ZoneRedundancy"];
        };
        /** @description RelationalDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        RelationalDatabaseService: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            ips?: string[];
            labels?: {
                [key: string]: string;
            };
            name?: string;
            ports?: number[];
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            activityLogging?: components["schemas"]["ActivityLogging"];
            anomalyDetections?: components["schemas"]["AnomalyDetection"][];
            authenticity?: components["schemas"]["Authenticity"];
            computeIds?: string[];
            geoLocation?: components["schemas"]["GeoLocation"];
            httpEndpoint?: components["schemas"]["HttpEndpoint"];
            loggings?: components["schemas"]["Logging"][];
            malwareProtection?: components["schemas"]["MalwareProtection"];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            serviceMetadataDocumentId?: string;
            storageIds?: string[];
            transportEncryption?: components["schemas"]["TransportEncryption"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description RemoteAttestation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        RemoteAttestation: {
            /** Format: date-time */
            creationTime?: string;
            enabled?: boolean;
            status?: boolean;
        };
        /** @description RemoteDataLocation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        RemoteDataLocation: {
            path?: string;
            authenticity?: components["schemas"]["Authenticity"];
            storageId?: string;
            transportEncryption?: components["schemas"]["TransportEncryption"];
        };
        /** @description Resource is an abstract class in our ontology, it cannot be instantiated but acts as an "interface". */
        Resource: {
            account?: components["schemas"]["Account"];
            job?: components["schemas"]["Job"];
            workflow?: components["schemas"]["Workflow"];
            codeRepository?: components["schemas"]["CodeRepository"];
            qpu?: components["schemas"]["QPU"];
            container?: components["schemas"]["Container"];
            function?: components["schemas"]["Function"];
            virtualMachine?: components["schemas"]["VirtualMachine"];
            containerOrchestration?: components["schemas"]["ContainerOrchestration"];
            containerRegistry?: components["schemas"]["ContainerRegistry"];
            certificate?: components["schemas"]["Certificate"];
            key?: components["schemas"]["Key"];
            secret?: components["schemas"]["Secret"];
            identity?: components["schemas"]["Identity"];
            roleAssignment?: components["schemas"]["RoleAssignment"];
            containerImage?: components["schemas"]["ContainerImage"];
            vmImage?: components["schemas"]["VMImage"];
            deviceProvisioningService?: components["schemas"]["DeviceProvisioningService"];
            messagingHub?: components["schemas"]["MessagingHub"];
            keyVault?: components["schemas"]["KeyVault"];
            networkInterface?: components["schemas"]["NetworkInterface"];
            networkSecurityGroup?: components["schemas"]["NetworkSecurityGroup"];
            functionService?: components["schemas"]["FunctionService"];
            genericNetworkService?: components["schemas"]["GenericNetworkService"];
            loadBalancer?: components["schemas"]["LoadBalancer"];
            loggingService?: components["schemas"]["LoggingService"];
            machineLearningService?: components["schemas"]["MachineLearningService"];
            securityAdvisoryService?: components["schemas"]["SecurityAdvisoryService"];
            documentDatabaseService?: components["schemas"]["DocumentDatabaseService"];
            keyValueDatabaseService?: components["schemas"]["KeyValueDatabaseService"];
            multiModalDatabaseService?: components["schemas"]["MultiModalDatabaseService"];
            relationalDatabaseService?: components["schemas"]["RelationalDatabaseService"];
            fileStorageService?: components["schemas"]["FileStorageService"];
            objectStorageService?: components["schemas"]["ObjectStorageService"];
            virtualNetwork?: components["schemas"]["VirtualNetwork"];
            virtualSubNetwork?: components["schemas"]["VirtualSubNetwork"];
            passwordPolicy?: components["schemas"]["PasswordPolicy"];
            resourceGroup?: components["schemas"]["ResourceGroup"];
            blockStorage?: components["schemas"]["BlockStorage"];
            databaseStorage?: components["schemas"]["DatabaseStorage"];
            fileStorage?: components["schemas"]["FileStorage"];
            objectStorage?: components["schemas"]["ObjectStorage"];
            codeNotebook?: components["schemas"]["CodeNotebook"];
            genericDocument?: components["schemas"]["GenericDocument"];
            policyDocument?: components["schemas"]["PolicyDocument"];
            securityAdvisoryDocument?: components["schemas"]["SecurityAdvisoryDocument"];
            serviceMetadataDocument?: components["schemas"]["ServiceMetadataDocument"];
            machineLearningDataset?: components["schemas"]["MachineLearningDataset"];
            machineLearningModel?: components["schemas"]["MachineLearningModel"];
            awarenessTraining?: components["schemas"]["AwarenessTraining"];
            securityTraining?: components["schemas"]["SecurityTraining"];
            application?: components["schemas"]["Application"];
            library?: components["schemas"]["Library"];
            sourceCodeFile?: components["schemas"]["SourceCodeFile"];
        };
        /** @description ResourceGroup is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ResourceGroup: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description ResourceLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ResourceLogging: {
            enabled?: boolean;
            monitoringLogDataEnabled?: boolean;
            retentionPeriod?: string;
            securityAlertsEnabled?: boolean;
            loggingServiceIds?: string[];
        };
        /** @description RobustnessScore is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        RobustnessScore: Record<string, never>;
        /** @description RoleAssignment is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        RoleAssignment: {
            activated?: boolean;
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            authenticity?: components["schemas"]["Authenticity"];
            authorization?: components["schemas"]["Authorization"];
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description SchemaValidation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        SchemaValidation: {
            format?: string;
            schemaUrl?: string;
            errors?: components["schemas"]["Error"][];
        };
        /** @description Secret is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        Secret: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            enabled?: boolean;
            /** Format: date-time */
            expirationDate?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            isManaged?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** Format: date-time */
            notBeforeDate?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            infrastructureId?: string;
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description SecurityAdvisoryDocument is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        SecurityAdvisoryDocument: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            filetype?: string;
            id?: string;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            dataLocation?: components["schemas"]["DataLocation"];
            documentChecksums?: components["schemas"]["DocumentChecksum"][];
            documentSignatures?: components["schemas"]["DocumentSignature"][];
            parentId?: string;
            schemaValidation?: components["schemas"]["SchemaValidation"];
            securityFeatures?: components["schemas"]["SecurityFeature"][];
            vulnerabilities?: components["schemas"]["Vulnerability"][];
        };
        /** @description SecurityAdvisoryFeed is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        SecurityAdvisoryFeed: {
            securityAdvisoryDocumentIds?: string[];
        };
        /** @description SecurityAdvisoryService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      This service discloses security advisories, e.g. according to the CSAF standard. It has one or more feeds that contain the actual advisories as well as multiple (public) keys that are used to sign the advisory documents. */
        SecurityAdvisoryService: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            ips?: string[];
            labels?: {
                [key: string]: string;
            };
            name?: string;
            ports?: number[];
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            authenticity?: components["schemas"]["Authenticity"];
            computeIds?: string[];
            geoLocation?: components["schemas"]["GeoLocation"];
            keyIds?: string[];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            securityAdvisoryFeeds?: components["schemas"]["SecurityAdvisoryFeed"][];
            serviceMetadataDocumentId?: string;
            transportEncryption?: components["schemas"]["TransportEncryption"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description SecurityFeature is an abstract class in our ontology, it cannot be instantiated but acts as an "interface". */
        SecurityFeature: {
            anomalyDetection?: components["schemas"]["AnomalyDetection"];
            activityLogging?: components["schemas"]["ActivityLogging"];
            applicationLogging?: components["schemas"]["ApplicationLogging"];
            bootLogging?: components["schemas"]["BootLogging"];
            osLogging?: components["schemas"]["OSLogging"];
            resourceLogging?: components["schemas"]["ResourceLogging"];
            malwareProtection?: components["schemas"]["MalwareProtection"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
            certificateBasedAuthentication?: components["schemas"]["CertificateBasedAuthentication"];
            tokenBasedAuthentication?: components["schemas"]["TokenBasedAuthentication"];
            multiFactorAuthentiation?: components["schemas"]["MultiFactorAuthentiation"];
            noAuthentication?: components["schemas"]["NoAuthentication"];
            otpBasedAuthentication?: components["schemas"]["OTPBasedAuthentication"];
            passwordBasedAuthentication?: components["schemas"]["PasswordBasedAuthentication"];
            singleSignOn?: components["schemas"]["SingleSignOn"];
            abac?: components["schemas"]["ABAC"];
            l3Firewall?: components["schemas"]["L3Firewall"];
            webApplicationFirewall?: components["schemas"]["WebApplicationFirewall"];
            rbac?: components["schemas"]["RBAC"];
            backup?: components["schemas"]["Backup"];
            dDoSProtection?: components["schemas"]["DDoSProtection"];
            geoLocation?: components["schemas"]["GeoLocation"];
            geoRedundancy?: components["schemas"]["GeoRedundancy"];
            localRedundancy?: components["schemas"]["LocalRedundancy"];
            zoneRedundancy?: components["schemas"]["ZoneRedundancy"];
            customerKeyEncryption?: components["schemas"]["CustomerKeyEncryption"];
            managedKeyEncryption?: components["schemas"]["ManagedKeyEncryption"];
            encryptionInUse?: components["schemas"]["EncryptionInUse"];
            transportEncryption?: components["schemas"]["TransportEncryption"];
            localAttestation?: components["schemas"]["LocalAttestation"];
            remoteAttestation?: components["schemas"]["RemoteAttestation"];
            automaticUpdates?: components["schemas"]["AutomaticUpdates"];
            documentChecksum?: components["schemas"]["DocumentChecksum"];
            immutability?: components["schemas"]["Immutability"];
            documentSignature?: components["schemas"]["DocumentSignature"];
            explainableResults?: components["schemas"]["ExplainableResults"];
            robustnessScore?: components["schemas"]["RobustnessScore"];
        };
        /** @description SecurityTraining is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        SecurityTraining: {
            annualUpdateCompleted?: boolean;
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            successfullyCompletedPercentage?: boolean;
            parentId?: string;
        };
        /** @description ServiceMetadataDocument is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ServiceMetadataDocument: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            filetype?: string;
            id?: string;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            dataLocation?: components["schemas"]["DataLocation"];
            documentChecksums?: components["schemas"]["DocumentChecksum"][];
            documentSignatures?: components["schemas"]["DocumentSignature"][];
            parentId?: string;
            schemaValidation?: components["schemas"]["SchemaValidation"];
            securityFeatures?: components["schemas"]["SecurityFeature"][];
        };
        /** @description SingleSignOn is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        SingleSignOn: {
            contextIsChecked?: boolean;
            enabled?: boolean;
        };
        /** @description SourceCodeFile is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        SourceCodeFile: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            codeModuleIds?: string[];
            codeRepositoryId?: string;
            functionalities?: components["schemas"]["Functionality"][];
            parentId?: string;
        };
        /** @description The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
        Status: {
            /**
             * Format: int32
             * @description The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
             */
            code?: number;
            /** @description A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client. */
            message?: string;
            /** @description A list of messages that carry the error details.  There is a common set of message types for APIs to use. */
            details?: components["schemas"]["GoogleProtobufAny"][];
        };
        /** @description StoreEvidenceResponse belongs to StoreEvidence, which uses a custom unary RPC and therefore requires a response message according to the style convention. Since no return values are required, this is empty. */
        StoreEvidenceResponse: Record<string, never>;
        /** @description TokenBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        TokenBasedAuthentication: {
            contextIsChecked?: boolean;
            enabled?: boolean;
            enforced?: boolean;
        };
        /** @description TransportEncryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      enabled means the resource _can_ be reached via https, while enforced means it _can only_ be reached via https (or http traffic is redirected) */
        TransportEncryption: {
            enabled?: boolean;
            enforced?: boolean;
            protocol?: string;
            /** Format: float */
            protocolVersion?: number;
            cipherSuites?: components["schemas"]["CipherSuite"][];
        };
        UpdateResourceRequest: {
            resource: components["schemas"]["Resource"];
        };
        /** @description UsageStatistics is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        UsageStatistics: {
            /** Format: int32 */
            apiHitsPerMonth?: number;
        };
        /** @description VMImage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        VMImage: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            applicationId?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description VirtualMachine is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        VirtualMachine: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            activityLogging?: components["schemas"]["ActivityLogging"];
            automaticUpdates?: components["schemas"]["AutomaticUpdates"];
            blockStorageIds?: string[];
            bootLogging?: components["schemas"]["BootLogging"];
            encryptionInUse?: components["schemas"]["EncryptionInUse"];
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            malwareProtection?: components["schemas"]["MalwareProtection"];
            networkInterfaceIds?: string[];
            osLogging?: components["schemas"]["OSLogging"];
            redundancies?: components["schemas"]["Redundancy"][];
            remoteAttestation?: components["schemas"]["RemoteAttestation"];
            parentId?: string;
            resourceLogging?: components["schemas"]["ResourceLogging"];
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description VirtualNetwork is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        VirtualNetwork: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description VirtualSubNetwork is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        VirtualSubNetwork: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description Vulnerability is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      cve: Common Vulnerabilities and Exposures
         *      cwe: Common Weakness Enumeration */
        Vulnerability: {
            cve?: string;
            cwe?: string[];
            description?: string;
            name?: string;
            url?: string;
        };
        /** @description WebApplicationFirewall is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
         *      A WAF is a L7 firewall that includes L3 capabilities */
        WebApplicationFirewall: {
            enabled?: boolean;
        };
        /** @description Workflow is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        Workflow: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description ZoneRedundancy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ZoneRedundancy: {
            geoLocations?: components["schemas"]["GeoLocation"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaAbac = components['schemas']['ABAC'];
export type SchemaAccessRestriction = components['schemas']['AccessRestriction'];
export type SchemaAccount = components['schemas']['Account'];
export type SchemaActivityLogging = components['schemas']['ActivityLogging'];
export type SchemaAnomalyDetection = components['schemas']['AnomalyDetection'];
export type SchemaApplication = components['schemas']['Application'];
export type SchemaApplicationLogging = components['schemas']['ApplicationLogging'];
export type SchemaAtRestEncryption = components['schemas']['AtRestEncryption'];
export type SchemaAuthenticity = components['schemas']['Authenticity'];
export type SchemaAuthorization = components['schemas']['Authorization'];
export type SchemaAutomaticUpdates = components['schemas']['AutomaticUpdates'];
export type SchemaAwarenessTraining = components['schemas']['AwarenessTraining'];
export type SchemaBackup = components['schemas']['Backup'];
export type SchemaBlockStorage = components['schemas']['BlockStorage'];
export type SchemaBootLogging = components['schemas']['BootLogging'];
export type SchemaCertificate = components['schemas']['Certificate'];
export type SchemaCertificateBasedAuthentication = components['schemas']['CertificateBasedAuthentication'];
export type SchemaCipherSuite = components['schemas']['CipherSuite'];
export type SchemaCodeNotebook = components['schemas']['CodeNotebook'];
export type SchemaCodeRegion = components['schemas']['CodeRegion'];
export type SchemaCodeRepository = components['schemas']['CodeRepository'];
export type SchemaContainer = components['schemas']['Container'];
export type SchemaContainerImage = components['schemas']['ContainerImage'];
export type SchemaContainerOrchestration = components['schemas']['ContainerOrchestration'];
export type SchemaContainerRegistry = components['schemas']['ContainerRegistry'];
export type SchemaCryptographicHash = components['schemas']['CryptographicHash'];
export type SchemaCustomerKeyEncryption = components['schemas']['CustomerKeyEncryption'];
export type SchemaDDoSProtection = components['schemas']['DDoSProtection'];
export type SchemaDataLocation = components['schemas']['DataLocation'];
export type SchemaDatabaseConnect = components['schemas']['DatabaseConnect'];
export type SchemaDatabaseQuery = components['schemas']['DatabaseQuery'];
export type SchemaDatabaseStorage = components['schemas']['DatabaseStorage'];
export type SchemaDecryption = components['schemas']['Decryption'];
export type SchemaDeviceProvisioningService = components['schemas']['DeviceProvisioningService'];
export type SchemaDocumentChecksum = components['schemas']['DocumentChecksum'];
export type SchemaDocumentDatabaseService = components['schemas']['DocumentDatabaseService'];
export type SchemaDocumentSignature = components['schemas']['DocumentSignature'];
export type SchemaEncryption = components['schemas']['Encryption'];
export type SchemaEncryptionInUse = components['schemas']['EncryptionInUse'];
export type SchemaError = components['schemas']['Error'];
export type SchemaEvidence = components['schemas']['Evidence'];
export type SchemaExplainableResults = components['schemas']['ExplainableResults'];
export type SchemaFileStorage = components['schemas']['FileStorage'];
export type SchemaFileStorageService = components['schemas']['FileStorageService'];
export type SchemaFunction = components['schemas']['Function'];
export type SchemaFunctionService = components['schemas']['FunctionService'];
export type SchemaFunctionality = components['schemas']['Functionality'];
export type SchemaGenericDocument = components['schemas']['GenericDocument'];
export type SchemaGenericNetworkService = components['schemas']['GenericNetworkService'];
export type SchemaGeoLocation = components['schemas']['GeoLocation'];
export type SchemaGeoRedundancy = components['schemas']['GeoRedundancy'];
export type SchemaGoogleProtobufAny = components['schemas']['GoogleProtobufAny'];
export type SchemaGraphEdge = components['schemas']['GraphEdge'];
export type SchemaHttpEndpoint = components['schemas']['HttpEndpoint'];
export type SchemaHttpRequest = components['schemas']['HttpRequest'];
export type SchemaHttpRequestHandler = components['schemas']['HttpRequestHandler'];
export type SchemaIdentity = components['schemas']['Identity'];
export type SchemaImmutability = components['schemas']['Immutability'];
export type SchemaJob = components['schemas']['Job'];
export type SchemaKey = components['schemas']['Key'];
export type SchemaKeyValueDatabaseService = components['schemas']['KeyValueDatabaseService'];
export type SchemaKeyVault = components['schemas']['KeyVault'];
export type SchemaL3Firewall = components['schemas']['L3Firewall'];
export type SchemaLibrary = components['schemas']['Library'];
export type SchemaListEvidencesResponse = components['schemas']['ListEvidencesResponse'];
export type SchemaListGraphEdgesResponse = components['schemas']['ListGraphEdgesResponse'];
export type SchemaListResourcesResponse = components['schemas']['ListResourcesResponse'];
export type SchemaListSupportedResourceTypesResponse = components['schemas']['ListSupportedResourceTypesResponse'];
export type SchemaLoadBalancer = components['schemas']['LoadBalancer'];
export type SchemaLocalAttestation = components['schemas']['LocalAttestation'];
export type SchemaLocalDataLocation = components['schemas']['LocalDataLocation'];
export type SchemaLocalRedundancy = components['schemas']['LocalRedundancy'];
export type SchemaLogOperation = components['schemas']['LogOperation'];
export type SchemaLogging = components['schemas']['Logging'];
export type SchemaLoggingService = components['schemas']['LoggingService'];
export type SchemaMachineLearningDataset = components['schemas']['MachineLearningDataset'];
export type SchemaMachineLearningModel = components['schemas']['MachineLearningModel'];
export type SchemaMachineLearningService = components['schemas']['MachineLearningService'];
export type SchemaMalwareProtection = components['schemas']['MalwareProtection'];
export type SchemaManagedKeyEncryption = components['schemas']['ManagedKeyEncryption'];
export type SchemaMessagingHub = components['schemas']['MessagingHub'];
export type SchemaMultiFactorAuthentiation = components['schemas']['MultiFactorAuthentiation'];
export type SchemaMultiModalDatabaseService = components['schemas']['MultiModalDatabaseService'];
export type SchemaNetworkInterface = components['schemas']['NetworkInterface'];
export type SchemaNetworkSecurityGroup = components['schemas']['NetworkSecurityGroup'];
export type SchemaNoAuthentication = components['schemas']['NoAuthentication'];
export type SchemaOsLogging = components['schemas']['OSLogging'];
export type SchemaOtpBasedAuthentication = components['schemas']['OTPBasedAuthentication'];
export type SchemaObjectStorage = components['schemas']['ObjectStorage'];
export type SchemaObjectStorageRequest = components['schemas']['ObjectStorageRequest'];
export type SchemaObjectStorageService = components['schemas']['ObjectStorageService'];
export type SchemaPasswordBasedAuthentication = components['schemas']['PasswordBasedAuthentication'];
export type SchemaPasswordPolicy = components['schemas']['PasswordPolicy'];
export type SchemaPolicyDocument = components['schemas']['PolicyDocument'];
export type SchemaQpu = components['schemas']['QPU'];
export type SchemaRbac = components['schemas']['RBAC'];
export type SchemaRedundancy = components['schemas']['Redundancy'];
export type SchemaRelationalDatabaseService = components['schemas']['RelationalDatabaseService'];
export type SchemaRemoteAttestation = components['schemas']['RemoteAttestation'];
export type SchemaRemoteDataLocation = components['schemas']['RemoteDataLocation'];
export type SchemaResource = components['schemas']['Resource'];
export type SchemaResourceGroup = components['schemas']['ResourceGroup'];
export type SchemaResourceLogging = components['schemas']['ResourceLogging'];
export type SchemaRobustnessScore = components['schemas']['RobustnessScore'];
export type SchemaRoleAssignment = components['schemas']['RoleAssignment'];
export type SchemaSchemaValidation = components['schemas']['SchemaValidation'];
export type SchemaSecret = components['schemas']['Secret'];
export type SchemaSecurityAdvisoryDocument = components['schemas']['SecurityAdvisoryDocument'];
export type SchemaSecurityAdvisoryFeed = components['schemas']['SecurityAdvisoryFeed'];
export type SchemaSecurityAdvisoryService = components['schemas']['SecurityAdvisoryService'];
export type SchemaSecurityFeature = components['schemas']['SecurityFeature'];
export type SchemaSecurityTraining = components['schemas']['SecurityTraining'];
export type SchemaServiceMetadataDocument = components['schemas']['ServiceMetadataDocument'];
export type SchemaSingleSignOn = components['schemas']['SingleSignOn'];
export type SchemaSourceCodeFile = components['schemas']['SourceCodeFile'];
export type SchemaStatus = components['schemas']['Status'];
export type SchemaStoreEvidenceResponse = components['schemas']['StoreEvidenceResponse'];
export type SchemaTokenBasedAuthentication = components['schemas']['TokenBasedAuthentication'];
export type SchemaTransportEncryption = components['schemas']['TransportEncryption'];
export type SchemaUpdateResourceRequest = components['schemas']['UpdateResourceRequest'];
export type SchemaUsageStatistics = components['schemas']['UsageStatistics'];
export type SchemaVmImage = components['schemas']['VMImage'];
export type SchemaVirtualMachine = components['schemas']['VirtualMachine'];
export type SchemaVirtualNetwork = components['schemas']['VirtualNetwork'];
export type SchemaVirtualSubNetwork = components['schemas']['VirtualSubNetwork'];
export type SchemaVulnerability = components['schemas']['Vulnerability'];
export type SchemaWebApplicationFirewall = components['schemas']['WebApplicationFirewall'];
export type SchemaWorkflow = components['schemas']['Workflow'];
export type SchemaZoneRedundancy = components['schemas']['ZoneRedundancy'];
export type $defs = Record<string, never>;
export interface operations {
    EvidenceStore_StoreEvidence: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Evidence"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoreEvidenceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    EvidenceStore_ListEvidences: {
        parameters: {
            query?: {
                "filter.targetOfEvaluationId"?: string;
                "filter.toolId"?: string;
                /** @description page_size: 0 = default (50 is default value), > 0 = set value (i.e. page_size = 5 -> SQL-Limit = 5) */
                pageSize?: number;
                pageToken?: string;
                orderBy?: string;
                asc?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListEvidencesResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    EvidenceStore_GetEvidence: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                evidenceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Evidence"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    EvidenceStore_ListResources: {
        parameters: {
            query?: {
                "filter.type"?: string;
                "filter.targetOfEvaluationId"?: string;
                "filter.toolId"?: string;
                pageSize?: number;
                pageToken?: string;
                orderBy?: string;
                asc?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResourcesResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    EvidenceStore_ListSupportedResourceTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListSupportedResourceTypesResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    ExperimentalResources_ListGraphEdges: {
        parameters: {
            query?: {
                pageSize?: number;
                pageToken?: string;
                orderBy?: string;
                asc?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListGraphEdgesResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    ExperimentalResources_UpdateResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "resource.id": string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateResourceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Resource"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
}
