/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/orchestrator/assessment_results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all assessment results. Part of the public API, also exposed as REST. */
        get: operations["Orchestrator_ListAssessmentResults"];
        put?: never;
        /** @description Stores the assessment result provided by an assessment tool */
        post: operations["Orchestrator_StoreAssessmentResult"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/assessment_results/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get an assessment result by ID */
        get: operations["Orchestrator_GetAssessmentResult"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/assessment_tools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists all assessment tools assessing evidences for the metric given by the
         *      passed metric id */
        get: operations["Orchestrator_ListAssessmentTools"];
        put?: never;
        /** @description Registers the passed assessment tool */
        post: operations["Orchestrator_RegisterAssessmentTool"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/assessment_tools/{tool.id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Updates the assessment tool given by the passed id */
        put: operations["Orchestrator_UpdateAssessmentTool"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/assessment_tools/{toolId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns assessment tool given by the passed tool id */
        get: operations["Orchestrator_GetAssessmentTool"];
        put?: never;
        post?: never;
        /** @description Remove assessment tool with passed id from the list of active assessment
         *      tools */
        delete: operations["Orchestrator_DeregisterAssessmentTool"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/audit_scopes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists all Audit Scopes */
        get: operations["Orchestrator_ListAuditScopes"];
        put?: never;
        /** @description Creates a new Audit Scope */
        post: operations["Orchestrator_CreateAuditScope"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/audit_scopes/{auditScopeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieves an Audit Scope */
        get: operations["Orchestrator_GetAuditScope"];
        put?: never;
        post?: never;
        /** @description Removes an Audit Scope */
        delete: operations["Orchestrator_RemoveAuditScope"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/catalogs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists all security controls catalogs. Each catalog includes a list of its
         *      categories but no additional sub-resources. */
        get: operations["Orchestrator_ListCatalogs"];
        put?: never;
        /** @description Creates a new security controls catalog */
        post: operations["Orchestrator_CreateCatalog"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/catalogs/{catalog.id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Updates an existing certificate */
        put: operations["Orchestrator_UpdateCatalog"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/catalogs/{catalogId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieves a specific catalog by it's ID. The catalog includes a list of all
         *      of it categories as well as the first level of controls in each category. */
        get: operations["Orchestrator_GetCatalog"];
        put?: never;
        post?: never;
        /** @description Removes a catalog */
        delete: operations["Orchestrator_RemoveCatalog"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/catalogs/{catalogId}/categories/{categoryName}/controls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description If no additional parameters are specified, this lists all controls. If a
         *      catalog ID and a category name is specified, then only controls containing
         *      in this category are returned. */
        get: operations["Orchestrator_ListControls"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/catalogs/{catalogId}/categories/{categoryName}/controls/{controlId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieves a control specified by the catalog ID, the control's category
         *      name and the control ID. If present, it also includes a list of
         *      sub-controls if present or a list of metrics if no sub-controls but metrics
         *      are present. */
        get: operations["Orchestrator_GetControl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/catalogs/{catalogId}/category/{categoryName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieves a category of a catalog specified by the catalog ID and the
         *      category name. It includes the first level of controls within each
         *      category. */
        get: operations["Orchestrator_GetCategory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/catalogs/{catalogId}/controls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description If no additional parameters are specified, this lists all controls. If a
         *      catalog ID and a category name is specified, then only controls containing
         *      in this category are returned. */
        get: operations["Orchestrator_ListControls"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/certificates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists all target certificates */
        get: operations["Orchestrator_ListCertificates"];
        put?: never;
        /** @description Creates a new certificate */
        post: operations["Orchestrator_CreateCertificate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/certificates/{certificate.id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Updates an existing certificate */
        put: operations["Orchestrator_UpdateCertificate"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/certificates/{certificateId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieves a certificate */
        get: operations["Orchestrator_GetCertificate"];
        put?: never;
        post?: never;
        /** @description Removes a certificate */
        delete: operations["Orchestrator_RemoveCertificate"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/controls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description If no additional parameters are specified, this lists all controls. If a
         *      catalog ID and a category name is specified, then only controls containing
         *      in this category are returned. */
        get: operations["Orchestrator_ListControls"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all metrics provided by the metric catalog */
        get: operations["Orchestrator_ListMetrics"];
        put?: never;
        /** @description Creates a new metric */
        post: operations["Orchestrator_CreateMetric"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/metrics/{implementation.metric_id}/implementation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Updates an existing metric implementation */
        put: operations["Orchestrator_UpdateMetricImplementation"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/metrics/{metric.id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Updates an existing metric */
        put: operations["Orchestrator_UpdateMetric"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/metrics/{metricId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the metric with the passed metric id */
        get: operations["Orchestrator_GetMetric"];
        put?: never;
        post?: never;
        /** @description Removes a new metric */
        delete: operations["Orchestrator_RemoveMetric"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/metrics/{metricId}/implementation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the metric implementation of the passed metric id */
        get: operations["Orchestrator_GetMetricImplementation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/public/certificates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists all target certificates without state history */
        get: operations["Orchestrator_ListPublicCertificates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/runtime_info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get Runtime Information */
        get: operations["Orchestrator_GetRuntimeInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/targets_of_evaluation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists all targets of evaluations */
        get: operations["Orchestrator_ListTargetsOfEvaluation"];
        put?: never;
        /** @description Registers a new target of evaluation */
        post: operations["Orchestrator_CreateTargetOfEvaluation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/targets_of_evaluation/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieves target of evaluation statistics */
        get: operations["Orchestrator_GetTargetOfEvaluationStatistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/targets_of_evaluation/{audit_scope.target_of_evaluation_id}/audit_scopes/{audit_scope.catalog_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Updates an existing Audit Scope */
        put: operations["Orchestrator_UpdateAuditScope"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/targets_of_evaluation/{targetOfEvaluationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieves a target of evaluation */
        get: operations["Orchestrator_GetTargetOfEvaluation"];
        put?: never;
        post?: never;
        /** @description Removes a target of evaluation */
        delete: operations["Orchestrator_RemoveTargetOfEvaluation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/targets_of_evaluation/{targetOfEvaluationId}/metric_configurations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists all metric configurations (target value and operator) for a
         *      specific target of evaluation ID */
        get: operations["Orchestrator_ListMetricConfigurations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/targets_of_evaluation/{targetOfEvaluationId}/metric_configurations/{metricId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieves a metric configuration (target value and operator) for a specific
         *      target of evaluation and metric ID. */
        get: operations["Orchestrator_GetMetricConfiguration"];
        /** @description Updates a metric configuration (target value and operator) for a specific
         *      target of evaluation and metric ID */
        put: operations["Orchestrator_UpdateMetricConfiguration"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orchestrator/targets_of_evaluation/{target_of_evaluation.id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Registers a new target of evaluation */
        put: operations["Orchestrator_UpdateTargetOfEvaluation"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description ActivityLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ActivityLogging: {
            enabled?: boolean;
            monitoringLogDataEnabled?: boolean;
            retentionPeriod?: string;
            securityAlertsEnabled?: boolean;
            loggingServiceIds?: string[];
        };
        /** @description ApplicationLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ApplicationLogging: {
            enabled?: boolean;
            monitoringLogDataEnabled?: boolean;
            retentionPeriod?: string;
            securityAlertsEnabled?: boolean;
            loggingServiceIds?: string[];
        };
        /** @description A result resource, representing the result after assessing the cloud resource
         *      with id resource_id. */
        AssessmentResult: {
            /** @description Assessment result id */
            id: string;
            /**
             * Format: date-time
             * @description Time of assessment
             */
            createdAt: string;
            /** @description Reference to the metric the assessment was based on */
            metricId: string;
            /** @description Data corresponding to the metric by the given metric id */
            metricConfiguration: components["schemas"]["MetricConfiguration"];
            /** @description Compliant case: true or false */
            compliant?: boolean;
            /** @description Reference to the last assessed evidence */
            evidenceId: string;
            /** @description Reference to the resource of the assessed evidence */
            resourceId: string;
            /** @description Resource types */
            resourceTypes: string[];
            /** @description ComplianceComment contains a human readable description on the reason for (non)-compliance. */
            complianceComment: string;
            /** @description ComplianceDetails contains machine-readable details about which comparisons lead to a (non)-compliance. */
            complianceDetails?: components["schemas"]["ComparisonResult"][];
            /** @description The target of evaluation which this assessment result belongs to */
            targetOfEvaluationId: string;
            /** @description Reference to the tool which provided the assessment result */
            toolId: string;
            /**
             * Format: date-time
             * @description The time of the last update of the assessment result history field
             */
            historyUpdatedAt: string;
            /** @description Stores the history of evidence IDs and timestamps for evidence that have the same content as the evidence used for this assessment result. */
            history: components["schemas"]["Record"][];
        };
        /** @description Represents an external tool or service that offers assessments according to
         *      certain metrics. */
        AssessmentTool: {
            id?: string;
            name: string;
            description?: string;
            /** @description a list of metrics that this tool can assess, referred by their ids */
            availableMetrics: string[];
        };
        /** @description A Audit Scope binds a target of evaluation to a catalog, so the target of evaluation is
         *      evaluated regarding this catalog's controls */
        AuditScope: {
            /** @description Audit Scope ID */
            id: string;
            name: string;
            targetOfEvaluationId: string;
            catalogId: string;
            /** @description an assurance level is not offered by every catalog, therefore it is
             *      optional */
            assuranceLevel?: string;
        };
        /** @description BootLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        BootLogging: {
            enabled?: boolean;
            monitoringLogDataEnabled?: boolean;
            retentionPeriod?: string;
            securityAlertsEnabled?: boolean;
            loggingServiceIds?: string[];
        };
        Catalog: {
            id: string;
            name: string;
            description?: string;
            categories: components["schemas"]["Category"][];
            /** @description Certain security catalogs do not allow to select the scope of the controls,
             *      but all controls are automatically "in scope", however they can be set to a
             *      DELEGATED status. */
            allInScope?: boolean;
            /** @description A list of the assurance levels, e.g., basic, substantial and high for the
             *      EUCS catalog. */
            assuranceLevels?: string[];
            /** @description Catalogs short name, e.g. EUCS */
            shortName: string;
            /** @description metadata of the catalog */
            metadata?: components["schemas"]["Catalog_Metadata"];
        };
        Catalog_Metadata: {
            /** @description a color for the target of evaluation used by the UI */
            color?: string;
        };
        Category: {
            name: string;
            /** @description Reference to the catalog this category belongs to. */
            catalogId: string;
            description?: string;
            controls: components["schemas"]["Control"][];
        };
        /** @description Certificate is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        Certificate: {
            /** Format: date-time */
            creationTime?: string;
            description?: string;
            enabled?: boolean;
            /** Format: date-time */
            expirationDate?: string;
            id?: string;
            internetAccessibleEndpoint?: boolean;
            isManaged?: boolean;
            labels?: {
                [key: string]: string;
            };
            name?: string;
            /** Format: date-time */
            notBeforeDate?: string;
            /** @description The raw field contains the raw information that is used to fill in the fields of the ontology. */
            raw?: string;
            geoLocation?: components["schemas"]["GeoLocation"];
            infrastructureId?: string;
            loggings?: components["schemas"]["Logging"][];
            redundancies?: components["schemas"]["Redundancy"][];
            parentId?: string;
            usageStatistics?: components["schemas"]["UsageStatistics"];
        };
        /** @description An optional structure containing more details how a comparison inside an assessment result was done and if it was successful. */
        ComparisonResult: {
            /** @description Property is the property that was compared */
            property: string;
            /** @description Value is the value in the property */
            value: components["schemas"]["GoogleProtobufValue"];
            /** @description Operator is the operator used in the comparison */
            operator: string;
            /** @description TargetValue is the target value used in the comparison */
            targetValue: components["schemas"]["GoogleProtobufValue"];
            /** @description Success is true, if the comparison was sucessful */
            success: boolean;
        };
        /** @description Control represents a certain Control that needs to be fulfilled. It could be
         *      a Control in a certification catalog. It follows the OSCAL model. A
         *      requirement in the EUCS terminology, e.g., is represented as the lowest
         *      sub-control. */
        Control: {
            /** @description A short name of the control, e.g. OPS-01, as used in OSCAL; it is not a
             *      unique ID! */
            id: string;
            categoryName: string;
            categoryCatalogId: string;
            /** @description Human-readable name of the control */
            name: string;
            /** @description Description of the control */
            description?: string;
            /** @description List of sub - controls -
             *          this is in accordance with the OSCAL model. */
            controls: components["schemas"]["Control"][];
            /** @description metrics contains either a list of reference to metrics - in this case only
             *      the id field of the metric is populated - or a list of populated metric
             *      meta-data, most likely returned by the database. */
            metrics: components["schemas"]["Metric"][];
            /** @description Reference to the parent category this control belongs to. */
            parentControlId?: string;
            parentControlCategoryName?: string;
            parentControlCategoryCatalogId?: string;
            /** @description An assurance level is not offered by every catalog, therefore it is
             *      optional. */
            assuranceLevel?: string;
        };
        Dependency: {
            path?: string;
            version?: string;
        };
        /** @description GeoLocation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        GeoLocation: {
            region?: string;
        };
        /** @description GeoRedundancy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        GeoRedundancy: {
            geoLocations?: components["schemas"]["GeoLocation"][];
        };
        GetTargetOfEvaluationStatisticsResponse: {
            /** @description number of discovered resources per target of evaluation */
            numberOfDiscoveredResources?: string;
            /** @description number of assessment results per target of evaluation */
            numberOfAssessmentResults?: string;
            /** @description number of evidences per target of evaluation */
            numberOfEvidences?: string;
            /** @description number of selected catalogs per target of evaluation */
            numberOfSelectedCatalogs?: string;
        };
        /** @description Contains an arbitrary serialized message along with a @type that describes the type of the serialized message. */
        GoogleProtobufAny: {
            /** @description The type of the serialized message. */
            "@type"?: string;
        } & {
            [key: string]: unknown;
        };
        /** @description Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values. */
        GoogleProtobufValue: unknown;
        ListAssessmentResultsResponse: {
            results?: components["schemas"]["AssessmentResult"][];
            nextPageToken?: string;
        };
        ListAssessmentToolsResponse: {
            tools?: components["schemas"]["AssessmentTool"][];
            nextPageToken?: string;
        };
        ListAuditScopesResponse: {
            auditScopes?: components["schemas"]["AuditScope"][];
            nextPageToken?: string;
        };
        ListCatalogsResponse: {
            catalogs?: components["schemas"]["Catalog"][];
            nextPageToken?: string;
        };
        ListCertificatesResponse: {
            certificates?: components["schemas"]["Certificate"][];
            nextPageToken?: string;
        };
        ListControlsResponse: {
            controls?: components["schemas"]["Control"][];
            nextPageToken?: string;
        };
        ListMetricConfigurationResponse: {
            /** @description A map of metric configurations associated by their metric ID */
            configurations?: {
                [key: string]: components["schemas"]["MetricConfiguration"];
            };
        };
        ListMetricsResponse: {
            metrics: components["schemas"]["Metric"][];
            nextPageToken?: string;
        };
        ListPublicCertificatesResponse: {
            certificates?: components["schemas"]["Certificate"][];
            nextPageToken?: string;
        };
        ListTargetsOfEvaluationResponse: {
            targets: components["schemas"]["TargetOfEvaluation"][];
            nextPageToken?: string;
        };
        /** @description LocalRedundancy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        LocalRedundancy: {
            geoLocations?: components["schemas"]["GeoLocation"][];
        };
        /** @description Logging is an abstract class in our ontology, it cannot be instantiated but acts as an "interface". */
        Logging: {
            activityLogging?: components["schemas"]["ActivityLogging"];
            applicationLogging?: components["schemas"]["ApplicationLogging"];
            bootLogging?: components["schemas"]["BootLogging"];
            osLogging?: components["schemas"]["OSLogging"];
            resourceLogging?: components["schemas"]["ResourceLogging"];
        };
        /** @description A metric resource */
        Metric: {
            /** @description Required. The unique identifier of the metric. */
            id: string;
            /** @description The description of the metric */
            description: string;
            /** @description The version of this metric */
            version: string;
            /** @description Optional comments that describe the purpose of this metric. They may also describe a scenario in which the metric can be useful. */
            comments?: string;
            /** @description Semantically, the reference to control catalog category or domain; it must conform to the directory structure of the security-metrics respository */
            category: string;
            /** @description The implementation of this metric. This ensures that we are modelling an
             *      association between a Metric and its MetricImplementation. */
            implementation?: components["schemas"]["MetricImplementation"];
            /**
             * Format: date-time
             * @description Optional, but required if the metric is removed. The metric is not deleted
             *      for backward compatibility and the timestamp is set to the time of removal.
             */
            deprecatedSince?: string;
        };
        /** @description Defines the operator and a target value for an individual metric */
        MetricConfiguration: {
            /** @description The operator to compare the metric, such as == or > */
            operator: string;
            /** @description The target value */
            targetValue: components["schemas"]["GoogleProtobufValue"];
            /** @description Whether this configuration is a default configuration */
            isDefault: boolean;
            /**
             * Format: date-time
             * @description The last time of update
             */
            updatedAt?: string;
            /** @description The metric this configuration belongs to */
            metricId: string;
            /** @description The target of evaluation this configuration belongs to */
            targetOfEvaluationId: string;
        };
        /** @description MetricImplementation defines the implementation of an individual metric. */
        MetricImplementation: {
            /** @description The metric which is implemented */
            metricId: string;
            /**
             * Format: enum
             * @description The language this metric is implemented in
             * @enum {string}
             */
            lang?: "LANGUAGE_UNSPECIFIED" | "LANGUAGE_REGO";
            /** @description The actual implementation */
            code: string;
            /**
             * Format: date-time
             * @description The last time of update
             */
            updatedAt?: string;
        };
        /** @description OSLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        OSLogging: {
            enabled?: boolean;
            monitoringLogDataEnabled?: boolean;
            retentionPeriod?: string;
            securityAlertsEnabled?: boolean;
            loggingServiceIds?: string[];
        };
        Record: {
            evidenceId: string;
            /** Format: date-time */
            evidenceRecordedAt: string;
        };
        /** @description Redundancy is an abstract class in our ontology, it cannot be instantiated but acts as an "interface". */
        Redundancy: {
            geoRedundancy?: components["schemas"]["GeoRedundancy"];
            localRedundancy?: components["schemas"]["LocalRedundancy"];
            zoneRedundancy?: components["schemas"]["ZoneRedundancy"];
        };
        /** @description ResourceLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ResourceLogging: {
            enabled?: boolean;
            monitoringLogDataEnabled?: boolean;
            retentionPeriod?: string;
            securityAlertsEnabled?: boolean;
            loggingServiceIds?: string[];
        };
        Runtime: {
            /** @description release_version is the latest Clouditor release version for this commit */
            releaseVersion?: string;
            /** @description vcs is the used version control system */
            vcs?: string;
            /** @description commit_hash is the current Clouditor commit hash */
            commitHash?: string;
            /**
             * Format: date-time
             * @description commit_time is the time of the Clouditor commit
             */
            commitTime?: string;
            /** @description golang_version is the used golang version */
            golangVersion?: string;
            /** @description dependency is a list of used runtime dependencies */
            dependencies?: components["schemas"]["Dependency"][];
        };
        /** @description The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
        Status: {
            /**
             * Format: int32
             * @description The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
             */
            code?: number;
            /** @description A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client. */
            message?: string;
            /** @description A list of messages that carry the error details.  There is a common set of message types for APIs to use. */
            details?: components["schemas"]["GoogleProtobufAny"][];
        };
        /** @description StoreAssessmentResultReponse belongs to StoreAssessmentResult, which uses a
         *      custom unary RPC and therefore requires a response message according to the
         *      style convention. Since no return values are required, this is empty. */
        StoreAssessmentResultResponse: Record<string, never>;
        TargetOfEvaluation: {
            id: string;
            name: string;
            description?: string;
            configuredMetrics: components["schemas"]["Metric"][];
            /**
             * Format: date-time
             * @description creation time of the target_of_evaluation
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description last update time of the target_of_evaluation
             */
            updatedAt?: string;
            /** @description additional metadata of the target of evaluation, mostly used for the UI */
            metadata?: components["schemas"]["TargetOfEvaluation_Metadata"];
            /**
             * Format: enum
             * @description type of the target to be evaluated: cloud, product or organization
             * @enum {string}
             */
            targetType: "TARGET_TYPE_UNSPECIFIED" | "TARGET_TYPE_CLOUD" | "TARGET_TYPE_PRODUCT" | "TARGET_TYPE_ORGANIZATION";
        };
        TargetOfEvaluation_Metadata: {
            /** @description a map of key/value pairs, e.g., env:prod */
            labels?: {
                [key: string]: string;
            };
            /** @description an icon for the target of evaluation used by the UI */
            icon?: string;
        };
        /** @description UsageStatistics is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        UsageStatistics: {
            /** Format: int32 */
            apiHitsPerMonth?: number;
        };
        /** @description ZoneRedundancy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces. */
        ZoneRedundancy: {
            geoLocations?: components["schemas"]["GeoLocation"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaActivityLogging = components['schemas']['ActivityLogging'];
export type SchemaApplicationLogging = components['schemas']['ApplicationLogging'];
export type SchemaAssessmentResult = components['schemas']['AssessmentResult'];
export type SchemaAssessmentTool = components['schemas']['AssessmentTool'];
export type SchemaAuditScope = components['schemas']['AuditScope'];
export type SchemaBootLogging = components['schemas']['BootLogging'];
export type SchemaCatalog = components['schemas']['Catalog'];
export type SchemaCatalogMetadata = components['schemas']['Catalog_Metadata'];
export type SchemaCategory = components['schemas']['Category'];
export type SchemaCertificate = components['schemas']['Certificate'];
export type SchemaComparisonResult = components['schemas']['ComparisonResult'];
export type SchemaControl = components['schemas']['Control'];
export type SchemaDependency = components['schemas']['Dependency'];
export type SchemaGeoLocation = components['schemas']['GeoLocation'];
export type SchemaGeoRedundancy = components['schemas']['GeoRedundancy'];
export type SchemaGetTargetOfEvaluationStatisticsResponse = components['schemas']['GetTargetOfEvaluationStatisticsResponse'];
export type SchemaGoogleProtobufAny = components['schemas']['GoogleProtobufAny'];
export type SchemaGoogleProtobufValue = components['schemas']['GoogleProtobufValue'];
export type SchemaListAssessmentResultsResponse = components['schemas']['ListAssessmentResultsResponse'];
export type SchemaListAssessmentToolsResponse = components['schemas']['ListAssessmentToolsResponse'];
export type SchemaListAuditScopesResponse = components['schemas']['ListAuditScopesResponse'];
export type SchemaListCatalogsResponse = components['schemas']['ListCatalogsResponse'];
export type SchemaListCertificatesResponse = components['schemas']['ListCertificatesResponse'];
export type SchemaListControlsResponse = components['schemas']['ListControlsResponse'];
export type SchemaListMetricConfigurationResponse = components['schemas']['ListMetricConfigurationResponse'];
export type SchemaListMetricsResponse = components['schemas']['ListMetricsResponse'];
export type SchemaListPublicCertificatesResponse = components['schemas']['ListPublicCertificatesResponse'];
export type SchemaListTargetsOfEvaluationResponse = components['schemas']['ListTargetsOfEvaluationResponse'];
export type SchemaLocalRedundancy = components['schemas']['LocalRedundancy'];
export type SchemaLogging = components['schemas']['Logging'];
export type SchemaMetric = components['schemas']['Metric'];
export type SchemaMetricConfiguration = components['schemas']['MetricConfiguration'];
export type SchemaMetricImplementation = components['schemas']['MetricImplementation'];
export type SchemaOsLogging = components['schemas']['OSLogging'];
export type SchemaRecord = components['schemas']['Record'];
export type SchemaRedundancy = components['schemas']['Redundancy'];
export type SchemaResourceLogging = components['schemas']['ResourceLogging'];
export type SchemaRuntime = components['schemas']['Runtime'];
export type SchemaStatus = components['schemas']['Status'];
export type SchemaStoreAssessmentResultResponse = components['schemas']['StoreAssessmentResultResponse'];
export type SchemaTargetOfEvaluation = components['schemas']['TargetOfEvaluation'];
export type SchemaTargetOfEvaluationMetadata = components['schemas']['TargetOfEvaluation_Metadata'];
export type SchemaUsageStatistics = components['schemas']['UsageStatistics'];
export type SchemaZoneRedundancy = components['schemas']['ZoneRedundancy'];
export type $defs = Record<string, never>;
export interface operations {
    Orchestrator_ListAssessmentResults: {
        parameters: {
            query?: {
                /** @description Optional. List only assessment results of a specific target of evaluation. */
                "filter.targetOfEvaluationId"?: string;
                /** @description Optional. List only compliant assessment results. */
                "filter.compliant"?: boolean;
                /** @description Optional. List only assessment results of a specific metric id. */
                "filter.metricIds"?: string[];
                "filter.metricId"?: string;
                /** @description Optional. List only assessment result from a specific assessment tool. */
                "filter.toolId"?: string;
                /** @description Optional. List only assessment result from a specific list of IDs. */
                "filter.assessmentResultIds"?: string[];
                /** @description Optional. Latest results grouped by resource_id and metric_id. */
                latestByResourceId?: boolean;
                pageSize?: number;
                pageToken?: string;
                orderBy?: string;
                asc?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAssessmentResultsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_StoreAssessmentResult: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssessmentResult"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoreAssessmentResultResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_GetAssessmentResult: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssessmentResult"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_ListAssessmentTools: {
        parameters: {
            query?: {
                pageSize?: number;
                pageToken?: string;
                orderBy?: string;
                asc?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAssessmentToolsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_RegisterAssessmentTool: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssessmentTool"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssessmentTool"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_UpdateAssessmentTool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "tool.id": string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssessmentTool"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssessmentTool"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_GetAssessmentTool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                toolId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssessmentTool"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_DeregisterAssessmentTool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                toolId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_ListAuditScopes: {
        parameters: {
            query?: {
                /** @description Optional. List only audit scopes of a specific target of evaluation */
                "filter.targetOfEvaluationId"?: string;
                /** @description Optional. List only audit scopes that evaluate the given catalog for any target of evaluation */
                "filter.catalogId"?: string;
                pageSize?: number;
                pageToken?: string;
                orderBy?: string;
                asc?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAuditScopesResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_CreateAuditScope: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuditScope"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuditScope"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_GetAuditScope: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                auditScopeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuditScope"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_RemoveAuditScope: {
        parameters: {
            query?: {
                removeEvaluationResults?: boolean;
            };
            header?: never;
            path: {
                auditScopeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_ListCatalogs: {
        parameters: {
            query?: {
                pageSize?: number;
                pageToken?: string;
                orderBy?: string;
                asc?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCatalogsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_CreateCatalog: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Catalog"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Catalog"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_UpdateCatalog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "catalog.id": string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Catalog"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Catalog"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_GetCatalog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                catalogId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Catalog"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_RemoveCatalog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                catalogId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_ListControls: {
        parameters: {
            query?: {
                /** @description Optional. Lists only controls with the specified assurance levels. */
                "filter.assuranceLevels"?: string[];
                pageSize?: number;
                pageToken?: string;
                orderBy?: string;
                asc?: boolean;
            };
            header?: never;
            path: {
                /** @description return either all controls or only the controls of the specified category */
                catalogId: string;
                categoryName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListControlsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_GetControl: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                catalogId: string;
                categoryName: string;
                controlId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Control"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_GetCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                catalogId: string;
                categoryName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_ListControls: {
        parameters: {
            query?: {
                categoryName?: string;
                /** @description Optional. Lists only controls with the specified assurance levels. */
                "filter.assuranceLevels"?: string[];
                pageSize?: number;
                pageToken?: string;
                orderBy?: string;
                asc?: boolean;
            };
            header?: never;
            path: {
                /** @description return either all controls or only the controls of the specified category */
                catalogId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListControlsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_ListCertificates: {
        parameters: {
            query?: {
                pageSize?: number;
                pageToken?: string;
                orderBy?: string;
                asc?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCertificatesResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_CreateCertificate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Certificate"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Certificate"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_UpdateCertificate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "certificate.id": string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Certificate"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Certificate"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_GetCertificate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                certificateId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Certificate"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_RemoveCertificate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                certificateId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_ListControls: {
        parameters: {
            query?: {
                /** @description return either all controls or only the controls of the specified category */
                catalogId?: string;
                categoryName?: string;
                /** @description Optional. Lists only controls with the specified assurance levels. */
                "filter.assuranceLevels"?: string[];
                pageSize?: number;
                pageToken?: string;
                orderBy?: string;
                asc?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListControlsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_ListMetrics: {
        parameters: {
            query?: {
                "filter.includeDeprecated"?: boolean;
                pageSize?: number;
                pageToken?: string;
                orderBy?: string;
                asc?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListMetricsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_CreateMetric: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Metric"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Metric"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_UpdateMetricImplementation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "implementation.metric_id": string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MetricImplementation"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricImplementation"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_UpdateMetric: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "metric.id": string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Metric"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Metric"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_GetMetric: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                metricId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Metric"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_RemoveMetric: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                metricId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_GetMetricImplementation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                metricId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricImplementation"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_ListPublicCertificates: {
        parameters: {
            query?: {
                pageSize?: number;
                pageToken?: string;
                orderBy?: string;
                asc?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListPublicCertificatesResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_GetRuntimeInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Runtime"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_ListTargetsOfEvaluation: {
        parameters: {
            query?: {
                pageSize?: number;
                pageToken?: string;
                orderBy?: string;
                asc?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListTargetsOfEvaluationResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_CreateTargetOfEvaluation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TargetOfEvaluation"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TargetOfEvaluation"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_GetTargetOfEvaluationStatistics: {
        parameters: {
            query?: {
                targetOfEvaluationId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTargetOfEvaluationStatisticsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_UpdateAuditScope: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "audit_scope.target_of_evaluation_id": string;
                "audit_scope.catalog_id": string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuditScope"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuditScope"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_GetTargetOfEvaluation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                targetOfEvaluationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TargetOfEvaluation"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_RemoveTargetOfEvaluation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                targetOfEvaluationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_ListMetricConfigurations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                targetOfEvaluationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListMetricConfigurationResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_GetMetricConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                targetOfEvaluationId: string;
                metricId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricConfiguration"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_UpdateMetricConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                targetOfEvaluationId: string;
                metricId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MetricConfiguration"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricConfiguration"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    Orchestrator_UpdateTargetOfEvaluation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "target_of_evaluation.id": string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TargetOfEvaluation"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TargetOfEvaluation"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
}
